from aiogram import Dispatcher, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from app.keyboards.keyboards import (get_gender_keyboard,
                                     get_prefer_gender_keyboard, main_kb)
from app.services.create_user import create_user
from app.states.registration import Registration

router = Router()

@router.message(Registration.name)
async def process_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await state.set_state(Registration.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    
@router.message(Registration.age)
async def process_age(message: Message, state: FSMContext) -> None:
    try:
        age = int(message.text) # type: ignore
        if not 10 <= age <= 100: 
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 100.")
            return
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=message.text)
    await state.set_state(Registration.city)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–∏–≤–µ—à—å?")
    
@router.message(Registration.city)
async def process_city(message: Message, state: FSMContext) -> None:
    await state.update_data(city=message.text)
    await state.set_state(Registration.description)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.")
    
@router.message(Registration.description)
async def process_description(message: Message, state: FSMContext) -> None:
    if len(message.text) > 300: # type: ignore
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    if len(message.text) < 20: # type: ignore
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(description=message.text)
    await state.set_state(Registration.gender)
    await message.answer("–ö–∞–∫–æ–∏ÃÜ —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=await get_gender_keyboard())
    
@router.message(Registration.gender)
async def process_gender(message: Message, state: FSMContext) -> None:
    if message.text not in ["–ú—É–∂—Å–∫–æ–∏ÃÜ", "–ñ–µ–Ω—Å–∫–∏–∏ÃÜ"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª.")
        return
    await state.update_data(gender=message.text)
    await state.set_state(Registration.prefer_gender)
    await message.answer("–ö–∞–∫–æ–∏ÃÜ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–∏ÃÜ –ø–æ–ª?", reply_markup=await get_prefer_gender_keyboard())
    
@router.message(Registration.prefer_gender)
async def process_prefer_gender(message: Message, state: FSMContext) -> None:
    if message.text not in ["–ú—É–∂—Å–∫–æ–∏ÃÜ", "–ñ–µ–Ω—Å–∫–∏–∏ÃÜ", "–ù–µ–≤–∞–∂–Ω–æ"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª.")
        return
    await state.update_data(prefer_gender=message.text)
    data = await state.get_data()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –æ —Ç–µ–±–µ –≤—Å–µ! üéâ", reply_markup=main_kb)
    await state.clear()
    await create_user(
        data, 
        message.from_user.id # type: ignore
    )
    
def register(dp: Dispatcher) -> None:
    dp.include_router(router)