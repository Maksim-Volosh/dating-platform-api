import asyncio
import logging
import os
import sys
import tempfile
from os import getenv

import aiohttp
from aiogram import Bot, Dispatcher, F, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (FSInputFile, InputMediaPhoto, KeyboardButton,
                           Message, ReplyKeyboardMarkup, ReplyKeyboardRemove)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()

TOKEN = getenv("BOT_TOKEN", "key")
API_URL = getenv("API_URL", "http://localhost:8000/api/v1")
API_KEY = getenv("API_KEY", "k")


dp = Dispatcher()

class Registration(StatesGroup):
    name = State()
    age = State()
    city = State()
    description = State()
    gender = State()
    prefer_gender = State()
    
async def get_name_keyboard(message: Message) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text=f"{message.from_user.first_name}")
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def get_gender_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ú—É–∂—Å–∫–æ–∏ÃÜ")
    kb.button(text="–ñ–µ–Ω—Å–∫–∏–∏ÃÜ")
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=True)

async def get_prefer_gender_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ú—É–∂—Å–∫–æ–∏ÃÜ")
    kb.button(text="–ñ–µ–Ω—Å–∫–∏–∏ÃÜ")
    kb.button(text="–ù–µ–≤–∞–∂–Ω–æ")
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=True)


main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ—è –∞–Ω–∫–µ—Ç–∞"), KeyboardButton(text="–õ–∏—Å—Ç–∞—Ç—å –∞–Ω–∫–µ—Ç—ã")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)


GENDER_MAP = {
    "–ú—É–∂—Å–∫–æ–∏ÃÜ": "male",
    "–ñ–µ–Ω—Å–∫–∏–∏ÃÜ": "female",
}
PREFER_GENDER_MAP = {
    "–ú—É–∂—Å–∫–æ–∏ÃÜ": "male",
    "–ñ–µ–Ω—Å–∫–∏–∏ÃÜ": "female",
    "–ù–µ–≤–∞–∂–Ω–æ": "anyone",
}

async def create_user(data: dict, telegram_id: int) -> bool:
    payload = {
        "telegram_id": telegram_id,
        "name": data["name"],
        "age": int(data["age"]),
        "city": data["city"],
        "description": data["description"],
        "gender": GENDER_MAP[data["gender"]],
        "prefer_gender": PREFER_GENDER_MAP[data["prefer_gender"]],
    }
    print(payload)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                f"{API_URL}/users/",
                headers={"x-api-key": API_KEY},
                json=payload,
            ) as resp:
                if resp.status == 201:
                    return True
                else:
                    logging.error(f"API error: {await resp.text()}")
                    return False


        except Exception as e:
            logging.error(f"API error: {e}")
    return False



@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    telegram_id = message.from_user.id
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(
                f"{API_URL}/users/{telegram_id}",
                headers={"x-api-key": API_KEY}
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {html.bold(data['name'])}! üëã", reply_markup=main_kb)
                else:
                    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –Ω–µ –Ω–∞—à—ë–ª –≤ –±–∞–∑–µ. –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è ‚ú®")
                    await state.set_state(Registration.name)
                    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup= await get_name_keyboard(message))

        except Exception as e:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
            logging.error(f"API error: {e}")
            
@dp.message(Registration.name)
async def process_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await state.set_state(Registration.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    
@dp.message(Registration.age)
async def process_age(message: Message, state: FSMContext) -> None:
    try:
        age = int(message.text)
        if not 10 <= age <= 100: 
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 100.")
            return
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=message.text)
    await state.set_state(Registration.city)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–∏–≤–µ—à—å?")
    
@dp.message(Registration.city)
async def process_city(message: Message, state: FSMContext) -> None:
    await state.update_data(city=message.text)
    await state.set_state(Registration.description)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.")
    
@dp.message(Registration.description)
async def process_description(message: Message, state: FSMContext) -> None:
    if len(message.text) > 300:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    if len(message.text) < 20:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(description=message.text)
    await state.set_state(Registration.gender)
    await message.answer("–ö–∞–∫–æ–∏ÃÜ —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=await get_gender_keyboard())
    
@dp.message(Registration.gender)
async def process_gender(message: Message, state: FSMContext) -> None:
    if message.text not in ["–ú—É–∂—Å–∫–æ–∏ÃÜ", "–ñ–µ–Ω—Å–∫–∏–∏ÃÜ"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª.")
        return
    await state.update_data(gender=message.text)
    await state.set_state(Registration.prefer_gender)
    await message.answer("–ö–∞–∫–æ–∏ÃÜ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–∏ÃÜ –ø–æ–ª?", reply_markup=await get_prefer_gender_keyboard())
    
@dp.message(Registration.prefer_gender)
async def process_prefer_gender(message: Message, state: FSMContext) -> None:
    if message.text not in ["–ú—É–∂—Å–∫–æ–∏ÃÜ", "–ñ–µ–Ω—Å–∫–∏–∏ÃÜ", "–ù–µ–≤–∞–∂–Ω–æ"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª.")
        return
    await state.update_data(prefer_gender=message.text)
    data = await state.get_data()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –æ —Ç–µ–±–µ –≤—Å–µ! üéâ", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await create_user(data, message.from_user.id)
    
@dp.message(F.text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def my_profile(message: Message, state: FSMContext) -> None:
    telegram_id = message.from_user.id

    async with aiohttp.ClientSession() as session:
        try:
            # --- 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            async with session.get(
                f"{API_URL}/users/{telegram_id}",
                headers={"x-api-key": API_KEY}
            ) as resp:
                if resp.status != 200:
                    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –Ω–µ –Ω–∞—à—ë–ª –≤ –±–∞–∑–µ. –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è ‚ú®")
                    await state.set_state(Registration.name)
                    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=await get_name_keyboard(message))
                    return

                data = await resp.json()
                caption = (
                    f"{html.bold(data['name'])}, {html.bold(str(data['age']))}, "
                    f"{html.bold(data['city'])}\n\n{html.bold(data['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}"
                )

            # --- 2. –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            async with session.get(
                f"{API_URL}/users/{telegram_id}/photos",
                headers={"x-api-key": API_KEY}
            ) as photo_resp:
                if photo_resp.status == 200:
                    photos_data = await photo_resp.json()
                    photos = photos_data.get("photos", [])

                    if photos:
                        media = []
                        tmp_files = []  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å

                        for i, p in enumerate(photos):
                            async with session.get("http://localhost:8000" + p["url"]) as resp:
                                if resp.status == 200:
                                    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
                                    tmp_file.write(await resp.read())
                                    tmp_file.close()

                                    # caption –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                                    if i == 0:
                                        media.append(InputMediaPhoto(
                                            media=FSInputFile(tmp_file.name),
                                            caption=caption,
                                            parse_mode="HTML"
                                        ))
                                    else:
                                        media.append(InputMediaPhoto(media=FSInputFile(tmp_file.name)))

                                    tmp_files.append(tmp_file.name)

                        if media:
                            await message.answer_media_group(media)
                            await message.answer("‚¨ÜÔ∏è –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞", reply_markup=main_kb)

                        # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        for f in tmp_files:
                            os.remove(f)

                    else:
                        await message.answer(caption, reply_markup=main_kb)
                else:
                    await message.answer(caption, reply_markup=main_kb)

        except Exception as e:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
            logging.error(f"API error: {e}")
    
@dp.message(F.text == "—Ñ–æ—Ç–æ")
async def send_foto(message: Message):
    url = "http://127.0.0.1:8000/uploads/0a6fe7fb-ec1d-40b2-acb3-a24b7113e8be_%D0%A1%D0%BD%D0%B8%D0%BC%D0%BE%D0%BA%20%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%20%D0%BE%D1%82%202025-07-31%2013-31-47.png"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                tmp_file = tempfile.NamedTemporaryFile(delete=False)
                tmp_file.write(await resp.read())
                tmp_file.close()

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                await message.answer_photo(FSInputFile(tmp_file.name))

                # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(tmp_file.name)
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")


async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())